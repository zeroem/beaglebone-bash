#!/bin/bash -e

function help_text() {
  cat <<HELP
Manage GPIO pins on the BeagleBone Black

Usage

$(basename "$0") [OPTIONS] HEADER PIN_NO

Options:
  -c, --confirm   Apply the changes requested.
  -h, --help      Print this message then exit
  --high          Initializes the pin high, implies --out
  -i, --in        Set the pin direction to in
  --low           Initializes the pin to low, implies --out
  -o, --out       Set the pin direction to out

HELP
}

function one_direction() {
  local -r current="${1}"
  local -r desired="${2}"

  if [ "$current" == "in" ] && [ "$desired" != "in" ]; then
    printf "You cannot set the direction to '%s' after already setting it to '%s'\n" "$desired" "$current" >&2
    return 1
  else
    if [ "$current" == "out" ]; then
      printf "%s\n" "$desired"
    else
      printf "%s\n" "$current"
    fi
  fi
}

function main() {
  local arg
  local -a pin_info=()

  while [ $# -gt 0 ]; do
    arg="$1"
    shift

    case "$arg" in
      --confirm)
        local -r confirm=yes
        ;;
      --debug)
        local -x debug=yes
        ;;
      -h|--help)
        help_text
        exit 0
        ;;
      --high)
        local direction="$(one_direction "$direction" high)"
        debug "direction is now '${direction}'"
        ;;
      -i|--input)
        local direction="$(one_direction "$direction" in)"
        debug "direction is now '${direction}'"
        ;;
      --low)
        local direction="$(one_direction "$direction" low)"
        debug "direction is now '${direction}'"
        ;;
      --no-debug)
        local -x debug=""
        ;;
      -o|--output)
        local direction="$(one_direction "$direction" out)"
        debug "direction is now '${direction}'"
        ;;
      *)
        pin_info+=("$arg")
        ;;
    esac
  done

  if [ "${#pin_info[@]}" -eq 0 ]; then
    printf "Both HEADER and PIN_NO are required arguments.\n\n" >&2
    help_text
    exit 1
  elif [ "${#pin_info[@]}" -eq 1 ]; then
    printf "PIN_NO is required argument.\n\n" >&2
    help_text
    exit 1
  elif [ "${#pin_info[@]}" -gt 2 ]; then
    printf "Too many arguments passed, expected 2 but got %d.\n\n" "${#pin_info[@]}"
    help_text
    exit 1
  fi 

  local -r header="${pin_info[0]}"
  local -r pin="${pin_info[1]}"
  local -r -i gpio_pin="$(gpio_pin "$header" "$pin")"
  local -r gpio_pin_path="$(gpio_pin_path "$gpio_pin")"

  if [ ! -e "$gpio_pin_path" ]; then
    debug "Exporting ${header} ${pin} as GPIO pin ${gpio_pin}."
    if [ -n "$confirm" ]; then
      printf "%d" "$gpio_pin" > "$export_path"
    fi
  else
    debug "${header} ${pin} is already exported as GPIO pin ${gpio_pin}."
  fi
  
  if [ -n "$direction" ]; then
    debug "Initializing direction to '${direction}'"

    if [ -n "$confirm" ]; then
      printf "$direction" > "$gpio_pin_path"/direction
    fi
  fi
}

main $@
